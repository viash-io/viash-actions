name: Build target directory
author: Data Intuitive
description: >
  Builds a target directory using the viash ns build command.

inputs:
  target_branch:
    description: 'Branch to deploy to. If not specified, `${BRANCH_NAME}_build` will be used.'
    required: false
  version:
    description: 'Version name to use for the build. If not specified, `${BRANCH_NAME}_build` will be used.'
    required: false

outputs:
  target_branch:
    description: 'The branch that the build was deployed to.'
    value: ${{ steps.defaults.outputs.target_branch }}
  version:
    description: 'The version that was used for the build.'
    value: ${{ steps.defaults.outputs.version }}
  docker_matrix:
    description: Matrix of executables for which Docker containers need to be built.
    value: ${{ steps.ns_list_docker.outputs.output_matrix }}

runs:
  using: 'composite'
  steps:
    - name: Determine version tag from branch name
      shell: bash
      id: defaults
      run: |
        BRANCH_NAME=$(echo $GITHUB_REF | sed 's/refs\/heads\///' | sed 's/[^a-zA-Z0-9_]/_/g')
        VERSION=${{ inputs.version }}
        if [ -z "$VERSION" ]; then
          VERSION="${BRANCH_NAME}_build"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        TARGET_BRANCH=${{ inputs.target_branch }}
        if [ -z "$TARGET_BRANCH" ]; then
          TARGET_BRANCH="${BRANCH_NAME}_build"
        fi
        echo "target_branch=$TARGET_BRANCH" >> $GITHUB_OUTPUT

        TARGET_DIR=$(yq -r '.target' _viash.yaml)
        if [ -z "$TARGET_DIR" ]; then
          TARGET_DIR="target"
        fi
        echo "target_dir=$TARGET_DIR" >> $GITHUB_OUTPUT

    - name: Remove target folder from .gitignore
      shell: bash
      run: |
        sed -i '/^\/?${{ steps.defaults.outputs.target_dir }}.*/d' .gitignore

    - name: Set version in _viash.yaml
      shell: bash
      run: |
        jq '.version = "${{ steps.defaults.outputs.version }}"' _viash.yaml > _viash.yaml.tmp && \
          mv _viash.yaml.tmp _viash.yaml

    - uses: ../../ns-build
      with:
        parallel: true

    - name: Find Docker Executables that need to be built
      id: ns_list_docker
      shell: bash
      run: |
        TARGET_DIR=`${{ steps.defaults.outputs.target_dir }}`

        BUILT_CONFIGS=`find "$TARGET_DIR" -name .config.vsh.yaml`

        OUTPUT="["

        for yaml in $BUILT_CONFIGS; do
          RUNNER=`yq -r ".build_info.runner" $yaml`
          ENGINE=`yq -r ".build_info.engine // .info.platform" $yaml`
          NAME=`yq -r ".name // .functionality.name" $yaml`
          NAMESPACE=`yq -r ".namespace // .functionality.namespace" $yaml`
          if [ "$NAMESPACE" != "null" ]; then
            FULL_NAME="$NAMESPACE/$NAME"
          else
            FULL_NAME="$NAME"
          fi
          CONFIG=`yq -r ".build_info.config // .info.config" $yaml`
          SRC_DIR=`dirname $CONFIG`
          TARGET_DIR=`dirname $yaml`
          EXECUTABLE=`yq -r ".build_info.executable // .info.executable" $yaml`

          JSON="{\"runner\":\"$RUNNER\",\"engine\":\"$ENGINE\",\"name\":\"$FULL_NAME\",\"config\":\"$CONFIG\",\"src_dir\":\"$SRC_DIR\",\"target_dir\":\"$TARGET_DIR\",\"executable\":\"$EXECUTABLE\"}"
          OUTPUT="$OUTPUT$JSON,"
        done

        OUTPUT="${OUTPUT%,}]"

        echo "output_matrix=$OUTPUT" >> $GITHUB_OUTPUT