name: Detect components with changed files
author: Data Intuitive
description: >
  Filter a json file produced by viash ns list on whether
  the component has been changed with respect to the
  default branch.
inputs:
  input_file:
    required: true
    description: 'Path to a viash ns list json file'
outputs:
  output_file:
    description: |
      Path to the filtered viash ns list json file, filtered on whether one of the
      resources of the component has been changed or not.
    value: ${{ steps.filter.outputs.output_file }}
  output_matrix:
    description: |
      Matrix of components that have changed resources.
    value: ${{ steps.set_matrix.outputs.matrix }}
runs:
  using: 'composite'
  steps:
  - name: Get head git commit message
    shell: bash
    id: get_head_commit_message
    run: echo "HEAD_COMMIT_MESSAGE=$(git show -s --format=%s ${{ github.event.pull_request.head.sha || github.sha }})" >> "$GITHUB_OUTPUT"

  - name: Get changed files
    id: changed-files
    uses: tj-actions/changed-files@v42.0.2
    with:
      separator: ";"
      diff_relative: true

  # Note: a component's resources is detected using a jq statement. 
  # Example usage of the jq statement:
  #
  # Input:
  # functionality:
  #   resources:
  #     - type: python_script
  #       path: script.py
  #       parent: file:/home/rcannood/workspace/openproblems/openproblems-v2/src/label_projection/methods/knn/config.vsh.yaml
  #     - type: file
  #       path: file.txt
  #       parent: file:///home/rcannood/workspace/openproblems/openproblems-v2/
  #     - type: "file"
  #       path: "resources_test/label_projection/pancreas"
  #       parent: "file:///home/rcannood/workspace/openproblems/openproblems-v2/"
  #   test_resources:
  #     - type: "file"
  #       path: "LICENSE"
  #       parent: "file:///home/rcannood/workspace/openproblems/openproblems-v2/"
  #     - type: "file"
  #       text: "content"
  #       dest: "foo.txt"
  # info:
  #   config: /home/rcannood/workspace/openproblems/openproblems-v2/src/label_projection/methods/knn/config.vsh.yaml
  #
  # Output:
  # /home/rcannood/workspace/openproblems/openproblems-v2/src/label_projection/methods/knn/config.vsh.yaml
  # /home/rcannood/workspace/openproblems/openproblems-v2/src/label_projection/methods/knn/script.py
  # /home/rcannood/workspace/openproblems/openproblems-v2/file.txt
  # /home/rcannood/workspace/openproblems/openproblems-v2/resources_test/label_projection/pancreas
  # /home/rcannood/workspace/openproblems/openproblems-v2/LICENSE
  - name: Set matrix to only run tests for components that had their config or resources changed.
    id: filter
    shell: bash
    run: |
      # create output path
      output_file=$(mktemp $RUNNER_TEMP/viash_ns_changed_files.XXXXXX.json)

      if [[ "$GITHUB_REF" == "refs/heads/${{ github.event.repository.default_branch }}" || "${{ contains(github.event.head_commit.message, 'ci force') }}" == "true" ]]; then
        cp "${{ inputs.input_file }}" "$output_file"
        echo "output_file=$output_file" >> $GITHUB_OUTPUT
        exit 0
      fi

      # create output array
      declare -a output_array=()

      # The output from changed-files is delimited by \;
      # So we use delimiter ';' to read the file and trim the backslash from the end.
      declare -a changed_files=()
      trim_slash() {
        line=$2
        changed_files[$1]="${line/%\\/}"
      }
      # read changed files as array
      readarray -d ';' -C trim_slash -c 1 -t <<< "${{ steps.changed-files.outputs.all_changed_files }}"

      # read components as array
      readarray -t components < <(jq -c '.[]' "${{ inputs.input_file }}")

      # iterate over the components
      for component in "${components[@]}"; do
        config_path=$(jq -cr '.build_info.config // .info.config' <<< "$component" )
        config_dir=`dirname "$config_path"`
        echo "Checking '$config_path'"

        # get the components resources
        readarray -t resources < <(
          jq -cr '
          (
            # viash config
            [.build_info.config // (.info.config)] +
            # viash >= 0.9 resources
            [
              ((.resources // []) + (.test_resources // []))[]
                | .path
                | sub("^(?<match>[^/])"; "'$config_dir'/" + .match)
                | sub("^/"; "")
            ] +
            # viash < 0.9 resources
            [
              (.functionality.resources // [])[], (.functionality.test_resources // [])[]
                | select(.path and .parent)
                | (.parent | sub("^file:(//)?"; "") | sub("/[^/]*$"; "")) + "/" + .path
            ]
          )[]
            # resolve paths wrt current dir (only needed for viash < 0.9)
            | sub("'"`pwd`"'/"; "")
            ' <<< "$component"
        )
        
        # check if resource is in the list of changed resources
        for resource_rel_path in "${resources[@]}"; do
          resource_project_path=$(realpath --relative-to="$GITHUB_WORKSPACE" "$resource_rel_path")
          if [[ " ${changed_files[*]} " =~ " ${resource_project_path} " ]]; then
            echo "  Detected changed resources!"
            output_array+="$component"
            break
          fi
        done
      done

      # reformat as json and write to file
      jq -cs '.' <<< "${output_array[*]}" > "$output_file"
      echo "output_file=$output_file" >> $GITHUB_OUTPUT

  - id: set_matrix
    shell: bash
    run: |
      echo "matrix=$(jq -c '[ .[] | 
        { 
          "name": (.name // .functionality.name),
          "namespace": (.namespace // .functionality.namespace // ""),
          "config": .build_info.config,
          "dir": .build_info.config | capture("^(?<dir>.*\/)").dir
        }
      ]' ${{ contains(steps.get_head_commit_message.outputs.HEAD_COMMIT_MESSAGE, 'ci force') && inputs.input_file || steps.ns_list_filtered.outputs.output_file }} )" >> $GITHUB_OUTPUT
