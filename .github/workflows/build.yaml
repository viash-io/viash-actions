name: Build

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.version }}
  cancel-in-progress: true

on:
  workflow_call: 
    inputs:
      project_directory:
        type: string
        description: 'The path to a Viash project'
        required: false
      version:
        type: string
        description: |
          The version of the project to build. Example: `1.0.3`.
          
          If not provided, a development build with a version name
          based on the branch name will be built. Otherwise, a release
          build with the provided version will be built.
        required: false
      retag_image_tag:
        type: string
        description: |
          A previously known tag that was used to build the Docker
          images. When provided, these images will be retagged and
          reused for the current build. This is useful when creating
          bug fix releases where the Docker images are known to be
          working.
        required: false

jobs:
  # phase 1
  target:
    name: Build target branch
    runs-on: ubuntu-latest
    permissions:
      contents: write

    outputs:
      target_branch: ${{ steps.build-target.outputs.target_branch }}
      version: ${{ steps.build-target.outputs.version }}
      docker_matrix: ${{ steps.build-target.outputs.docker_matrix }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Install Viash
        uses: viash-io/viash-actions/setup@v6
      
      - name: Determine variables
        id: variables
        working-directory: ${{ inputs.project_directory }}
        run: |
          VERSION="${{ inputs.version }}"
          SOURCE_BRANCH=$(echo "$GITHUB_REF" | sed 's/refs\/heads\///')

          if [[ -z $VERSION ]]; then
            TARGET_BRANCH="build/$SOURCE_BRANCH"
            VERSION=$(echo "$TARGET_BRANCH" | sed 's/[^a-zA-Z0-9_]/_/g')
          else
            if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
              echo "Version '$VERSION' does not match PEP440"
              exit 1
            fi
            TARGET_BRANCH="release/${VERSION%.*}.x"
          fi

          echo "Set version of Viash package to '$VERSION'"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          echo "Set target branch to '$TARGET_BRANCH'"
          echo "target_branch=$TARGET_BRANCH" >> $GITHUB_OUTPUT
          

      - uses: viash-io/viash-actions/project/build-target@v6
        id: build-target
        with:
          project_directory: ${{ inputs.project_directory }}
          target_branch: ${{ steps.variables.outputs.target_branch }}
          version: ${{ steps.variables.outputs.version }}
      
      - name: Deploy to target branch
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: ${{ steps.variables.outputs.target_branch }}
          publish_dir: ${{ inputs.project_directory }}

  # phase 2
  docker:
    name: Build
    needs: target

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      fail-fast: false
      matrix:
        component: ${{ fromJson(needs.target.outputs.docker_matrix) }}

    steps:
      # Remove unnecessary files to free up space. Otherwise, we get 'no space left on device.'
      - uses: data-intuitive/reclaim-the-bytes@v2
      
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          ref: ${{ needs.target.outputs.target_branch }}

      - uses: viash-io/viash-actions/setup@v6
          
      - name: Login to container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image
        if: ${{ inputs.retag_image_tag == '' }}
        working-directory: ${{ inputs.project_directory }}
        run: |
          ${{matrix.component.executable}} ---engine docker ---setup build ---verbose
        
      - name: Retag image
        if: ${{ inputs.retag_image_tag != '' }}
        working-directory: ${{ inputs.project_directory }}
        run: |
          source_image_tag="${{ inputs.retag_image_tag }}"

          # get image id from executable
          # format: VIASH_DOCKER_IMAGE_ID='annotate/popv:latest'
          dest_image_id=$(grep -oP "VIASH_DOCKER_IMAGE_ID='[^']+'" ${{matrix.component.executable}} | cut -d"'" -f2)

          # for viash 0.9 and later, use the following line instead
          # dest_image_id=$(${{matrix.component.executable}} ---engine docker ---docker_image_id)

          # strip tag from dest_image_id and replace with source_image_tag using bash variable substitution
          source_image_id="${dest_image_id%:*}:${source_image_tag}"

          echo "Retagging image '$source_image_id' to '$dest_image_id'"
          docker tag "$source_image_id" "$dest_image_id"
  
      - name: Push image
        working-directory: ${{ inputs.project_directory }}
        run: |
          ${{matrix.component.executable}} ---engine docker ---setup push ---verbose
